pipeline {
    agent any

    stages {
        stage('Exportiong from OCI') {
            steps {
                git branch: 'main', url:'https://github.com/Achrafkhaterchi/OCI_to_AZURE.git'

                sh 'python3 Backend/Network_Export.py Backend/OCI.xlsx Backend/network-tfstate_terraform.tfstate'

                archiveArtifacts 'Backend/OCI.xlsx'
            }
        }

        stage('TFVARS') {
            steps {
                stash(name: 'ociArtifact', includes: 'Backend/OCI.xlsx')
                script {
                    unstash 'ociArtifact'

                    sh 'python3 Backend/Security_Create.py Network/Security/Template/Security.j2 Backend/OCI.xlsx'
                }
                archiveArtifacts 'Network/Security/variables.tfvars'
            }
        }

        stage('Retrieve main.tf Security from Shared Location') {
            steps {
                sh 'cp /home/shared_files/Security/main.tf Network/Security/main.tf'
                script {
                    if (fileExists('Network/Security/main.tf')) {
                        echo 'Network/Security/main.tf exists after copy.'
                        sh 'cat Network/Security/main.tf'
                    } else {
                        error('Network/Security/main.tf does not exist after copy.')
                    }
                }
                sh 'rm /home/shared_files/Security/main.tf'
            }
        }

        stage('Terraform Init') {
            steps {
                dir('Network/Security/') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('Network/Security/'){
                    sh 'terraform plan -var-file=variables.tfvars -out tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('Network/Security/'){
                sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        /*stage('Terraform Destroy') {
            steps {
                dir('Network\VNets\'){
                sh 'terraform destroy -auto-approve -var-file=variables.tfvars'
                }
            }
        }*/
    }

    post {
        success {
            echo 'Security module has successfully transfered from OCI to Azure !'
        }
    }
}
